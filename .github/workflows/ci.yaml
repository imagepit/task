name: ci
on:
  push:
    branches:
      - master
env:
  EC2_USER: 'ubuntu'
  EC2_HOST: ${{ secrets.EC2_HOST }}
  SRC_PATH: 'build/libs/*.jar'
  DEST_DIR: '/var/apps'
  APP_NAME: 'spring-boot-app'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Test with Gradle
        run: chmod +x gradlew && ./gradlew test
      - name: save test reports as artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          path: build/reports/tests/test
      - name: Build with Gradle
        run: ./gradlew build
      - name: save build artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: build-artifact
          path: build/libs/task-0.0.1-SNAPSHOT.jar
      - name: Deploy to EC2 by SCP
        env:
          PRIVATE_KEY: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -t -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} "sudo mkdir -p $DEST_DIR/$APP_NAME && sudo chmod -R 777 $DEST_DIR/$APP_NAME"
          scp -i private_key ${SRC_PATH} ${EC2_USER}@${EC2_HOST}:${DEST_DIR}/${APP_NAME}/${APP_NAME}.jar
      - name: SSH EC2 Setup and Deploy
        uses: appleboy/ssh-action@v0.0.9
        with:
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          username: ${{ env.EC2_USER }}
          host: ${{ env.EC2_HOST }}
          script: |
            echo "===== check exist service file ====="
            if [ -f /etc/systemd/system/${APP_NAME}.service ]; then
            echo "already exist service file for $APP_NAME"
            else
            echo "create service file for $APP_NAME"
            cat <<EOL | sudo tee -a  /etc/systemd/system/${APP_NAME}.service
            [Unit]
            Description = ${APP_NAME} app
            After = network.target

            [Service]
            ExecStart =  ${DEST_DIR}/${APP_NAME}/${APP_NAME}.jar
            Restart = always
            User = ${EC2_USER}

            [Install]
            WantedBy = multi-user.target
            EOL
            fi
            echo "===== application (re)start ====="
            sudo systemctl daemon-reload
            if sudo systemctl status ${APP_NAME} 2>&1 | grep "Active: active (running)" ; then
              echo "${APP_NAME} app restart!!"
              sudo systemctl restart ${APP_NAME}
            else
              echo "${APP_NAME} app start!!"
              sudo systemctl start ${APP_NAME}
            fi